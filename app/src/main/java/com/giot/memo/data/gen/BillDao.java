package com.giot.memo.data.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.giot.memo.data.entity.Bill;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BILL".
*/
public class BillDao extends AbstractDao<Bill, Long> {

    public static final String TABLENAME = "BILL";

    /**
     * Properties of entity Bill.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Money = new Property(1, float.class, "money", false, "MONEY");
        public final static Property Mode = new Property(2, int.class, "mode", false, "MODE");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Remark = new Property(4, String.class, "remark", false, "REMARK");
        public final static Property Date = new Property(5, java.util.Date.class, "date", false, "CREATE_TIME");
        public final static Property UserId = new Property(6, String.class, "userId", false, "USER_ID");
        public final static Property Sync = new Property(7, int.class, "sync", false, "SYNC");
    };


    public BillDao(DaoConfig config) {
        super(config);
    }
    
    public BillDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MONEY\" REAL NOT NULL ," + // 1: money
                "\"MODE\" INTEGER NOT NULL ," + // 2: mode
                "\"TYPE\" TEXT," + // 3: type
                "\"REMARK\" TEXT," + // 4: remark
                "\"CREATE_TIME\" INTEGER," + // 5: date
                "\"USER_ID\" TEXT," + // 6: userId
                "\"SYNC\" INTEGER NOT NULL );"); // 7: sync
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Bill entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getMoney());
        stmt.bindLong(3, entity.getMode());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(5, remark);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
        stmt.bindLong(8, entity.getSync());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Bill entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getMoney());
        stmt.bindLong(3, entity.getMode());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(5, remark);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
        stmt.bindLong(8, entity.getSync());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Bill readEntity(Cursor cursor, int offset) {
        Bill entity = new Bill( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getFloat(offset + 1), // money
            cursor.getInt(offset + 2), // mode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remark
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userId
            cursor.getInt(offset + 7) // sync
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Bill entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMoney(cursor.getFloat(offset + 1));
        entity.setMode(cursor.getInt(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSync(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Bill entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Bill entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
